/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Experience = {
  _id: string;
  _type: "experience";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  role?: string;
  startDate?: string;
  endDate?: string;
  isOngoing?: boolean;
  points?: Array<string>;
};

export type About = {
  _id: string;
  _type: "about";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  intro?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  subIntro?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  skills?: Array<string>;
  keyImage?: Array<{
    keyword?: string;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
    placeBefore?: boolean;
    _key: string;
  }>;
  aboutQuote?: string;
  aboutMe?: string;
  testamonials?: Array<{
    avatar?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    testamony?: string;
    personName?: string;
    personRole?: string;
    _key: string;
  }>;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  inComplete?: boolean;
  url?: string;
  appleLink?: string;
  androidLink?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  description?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "projectDesc";
  };
  thumbnails?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  screens?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    subCaption?: string;
    _type: "image";
    _key: string;
  }>;
  projectInfo?: Array<{
    title?: string;
    subtitle?: string;
    invertedIsland?: boolean;
    desciption?: string;
    thumbnails?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      title?: string;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
    points?: Array<{
      subHeader?: string;
      title?: string;
      description?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?:
          | "normal"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "blockquote";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      _key: string;
    }>;
    metrics?: Array<{
      title?: string;
      value?: number;
      suffix?: string;
      _key: string;
    }>;
    screens?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      caption?: string;
      subCaption?: string;
      _type: "image";
      _key: string;
    }>;
    _key: string;
  }>;
};

export type ProjectDesc = {
  _id: string;
  _type: "projectDesc";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  attributes?: Array<{
    label?: string;
    desc?: string;
    isFullWidth?: boolean;
    _key: string;
  }>;
  descriptionBody?: string;
  shortDescBody?: string;
  createdAt?: string;
  tags?: Array<string>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }
>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Experience
  | About
  | Project
  | ProjectDesc
  | Post
  | Author
  | Category
  | Slug
  | BlockContent
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/sanity.queries.ts
// Variable: queryProjectThumbnail
// Query: *[_type == "project" && (!defined($slug) || slug.current != $slug)] | order(_createdAt asc, inComplete desc){  _id,   title,   slug,   thumbnails,  inComplete,  description->{    shortDescBody,    tags  }}
export type QueryProjectThumbnailResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  thumbnails: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  inComplete: boolean | null;
  description: {
    shortDescBody: string | null;
    tags: Array<string> | null;
  } | null;
}>;
// Variable: queryProjectInfo
// Query: *[_type == "project" && (!defined($slug) || slug.current == $slug)][0]{      _id,       title,       slug,       thumbnails,       mainImage,      url,      inComplete,       appleLink,      androidLink,      description->{        attributes,        descriptionBody,        shortDescBody      },      projectInfo[]{        ...,        "screens": screens[]{          ...,          "asset": asset->url        }      }    }
export type QueryProjectInfoResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  thumbnails: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  url: string | null;
  inComplete: boolean | null;
  appleLink: string | null;
  androidLink: string | null;
  description: {
    attributes: Array<{
      label?: string;
      desc?: string;
      isFullWidth?: boolean;
      _key: string;
    }> | null;
    descriptionBody: string | null;
    shortDescBody: string | null;
  } | null;
  projectInfo: Array<{
    title?: string;
    subtitle?: string;
    invertedIsland?: boolean;
    desciption?: string;
    thumbnails?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      title?: string;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
    points?: Array<{
      subHeader?: string;
      title?: string;
      description?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?:
          | "blockquote"
          | "h1"
          | "h2"
          | "h3"
          | "h4"
          | "h5"
          | "h6"
          | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      _key: string;
    }>;
    metrics?: Array<{
      title?: string;
      value?: number;
      suffix?: string;
      _key: string;
    }>;
    screens: Array<{
      asset: string | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      caption?: string;
      subCaption?: string;
      _type: "image";
      _key: string;
    }> | null;
    _key: string;
  }> | null;
} | null;
// Variable: queryHomePageInfo
// Query: *[_type == "about"][0]{  _id,   keyImage,  intro,  subIntro,  skills,  aboutQuote,  aboutMe,  testamonials[]{    personName,    personRole,    testamony,    "avatar": avatar.asset->url  },}
export type QueryHomePageInfoResult = {
  _id: string;
  keyImage: Array<{
    keyword?: string;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
    placeBefore?: boolean;
    _key: string;
  }> | null;
  intro: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  subIntro: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  skills: Array<string> | null;
  aboutQuote: string | null;
  aboutMe: string | null;
  testamonials: Array<{
    personName: string | null;
    personRole: string | null;
    testamony: string | null;
    avatar: string | null;
  }> | null;
} | null;
// Variable: querySkillSectionInfo
// Query: *[_type == "about"][0]{  _id,   skills,  aboutQuote}
export type QuerySkillSectionInfoResult = {
  _id: string;
  skills: Array<string> | null;
  aboutQuote: string | null;
} | null;
// Variable: queryAboutPageInfo
// Query: *[_type == "about"][0]{  _id,   aboutMe,  testamonials[]{    personName,    personRole,    testamony,    "avatar": avatar.asset->url  },  keyImage}
export type QueryAboutPageInfoResult = {
  _id: string;
  aboutMe: string | null;
  testamonials: Array<{
    personName: string | null;
    personRole: string | null;
    testamony: string | null;
    avatar: string | null;
  }> | null;
  keyImage: Array<{
    keyword?: string;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
    placeBefore?: boolean;
    _key: string;
  }> | null;
} | null;
// Variable: queryExperiences
// Query: *[_type == "experience"] | order(startDate desc){  _id,   title,  role,  startDate,  endDate,  isOngoing,  points}
export type QueryExperiencesResult = Array<{
  _id: string;
  title: string | null;
  role: string | null;
  startDate: string | null;
  endDate: string | null;
  isOngoing: boolean | null;
  points: Array<string> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "project" && (!defined($slug) || slug.current != $slug)] | order(_createdAt asc, inComplete desc){\n  _id, \n  title, \n  slug, \n  thumbnails,\n  inComplete,\n  description->{\n    shortDescBody,\n    tags\n  }\n}': QueryProjectThumbnailResult;
    '*[_type == "project" && (!defined($slug) || slug.current == $slug)][0]{\n      _id, \n      title, \n      slug, \n      thumbnails, \n      mainImage,\n      url,\n      inComplete, \n      appleLink,\n      androidLink,\n      description->{\n        attributes,\n        descriptionBody,\n        shortDescBody\n      },\n      projectInfo[]{\n        ...,\n        "screens": screens[]{\n          ...,\n          "asset": asset->url\n        }\n      }\n    }': QueryProjectInfoResult;
    '*[_type == "about"][0]{\n  _id, \n  keyImage,\n  intro,\n  subIntro,\n  skills,\n  aboutQuote,\n  aboutMe,\n  testamonials[]{\n    personName,\n    personRole,\n    testamony,\n    "avatar": avatar.asset->url\n  },\n}': QueryHomePageInfoResult;
    '*[_type == "about"][0]{\n  _id, \n  skills,\n  aboutQuote\n}': QuerySkillSectionInfoResult;
    '*[_type == "about"][0]{\n  _id, \n  aboutMe,\n  testamonials[]{\n    personName,\n    personRole,\n    testamony,\n    "avatar": avatar.asset->url\n  },\n  keyImage\n}': QueryAboutPageInfoResult;
    '*[_type == "experience"] | order(startDate desc){\n  _id, \n  title,\n  role,\n  startDate,\n  endDate,\n  isOngoing,\n  points\n}': QueryExperiencesResult;
  }
}
